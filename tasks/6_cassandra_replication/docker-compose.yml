version: '3.9'

networks:
  cassandra:                                      # docker network where all cassandra nodes will be put in

services:
  node_1:
    image: cassandra:3.11                         # better to use a specific version, if you want to control upgrades
    container_name: node_1
    mem_limit: 2g                                 # It's not strictly required, but it's better to have some memory limit
    healthcheck:
        test: ["CMD", "cqlsh", "-e", "describe keyspaces" ]
        interval: 5s
        timeout: 5s
        retries: 60
    networks:
      - cassandra
    expose:
      - 7000
      - 7001
      - 7199
      - 9042
      - 9142
    ports:
      - "9042:9042"                               # Expose native binary CQL port for your apps
    volumes:
      - cassandra_data_node_1:/var/lib/cassandra  # This is the volume that will persist data for node_1
      # - ./etc/cass1:/etc/cassandra                # Use your own config files for full control
    environment: &environment                     # Declare and save environments variables into "environment"
        CASSANDRA_SEEDS: node_1                   # The first two nodes will be seeds
        CASSANDRA_CLUSTER_NAME: "Domin's Cluster"
        CASSANDRA_DC: dc_1
        CASSANDRA_RACK: west
        CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
        CASSANDRA_NUM_TOKENS: 128
        MAX_HEAP_SIZE: 256M
        HEAP_NEWSIZE: 128M
    deploy:
      restart_policy:
          condition: on-failure

  node_2:
    image: cassandra:3.11
    container_name: node_2
    mem_limit: 2g
    healthcheck:
        test: ["CMD", "cqlsh", "-e", "describe keyspaces" ]
        interval: 5s
        timeout: 5s
        retries: 60
    networks:
      - cassandra
    expose:
      - 7000
      - 7001
      - 7199
      - 9042
      - 9142
    ports:
      - 9043:9042                                   # Expose native binary CQL port for your apps
    volumes:
      - cassandra_data_node_2:/var/lib/cassandra    # This is the volume that will persist data for node_2
      # - ./etc/cass2:/etc/cassandra                  # Use your own config files for full control
    environment: *environment                       # point to "environment" to use the same environment variables as node_1
    # depends_on:
    #   - node_1                                       # start node_2 only after node_1 is healthy
    deploy:
      restart_policy:
          condition: on-failure

  node_3:
    image: cassandra:3.11
    container_name: node_3
    mem_limit: 2g
    healthcheck:
        test: ["CMD", "cqlsh", "-e", "describe keyspaces" ]
        interval: 5s
        timeout: 5s
        retries: 60
    networks:
      - cassandra
    expose:
      - 7000
      - 7001
      - 7199
      - 9042
      - 9142
    ports:
      - "9044:9042"                                 # Expose native binary CQL port for your apps
    volumes:
      - cassandra_data_node_3:/var/lib/cassandra    # This is the volume that will persist data for node_3
      # - ./etc/cass3:/etc/cassandra                  # Use your own config files for full control
    environment: *environment                       # point to "environment" to use the same environment variables as node_1
    depends_on:
      - node_1
      - node_2                                       # start node_3 only after node_2 is healthy             
    deploy:
      restart_policy:
          condition: on-failure

volumes:
  cassandra_data_node_1:
  cassandra_data_node_2:
  cassandra_data_node_3: